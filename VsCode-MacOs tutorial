Installing GDB
As with GCC, the easiest way to install GDB is through Homebrew. 
In a Terminal window, run the command 

brew install gdb

and wait for it to complete. (As usual, it may ask for your password.)


Creating a new certificate isn’t particularly complicated:

Open up Keychain Access
Select Certificate Assistant -> Create a Certificate
give it a name gdb-cert, type is self-signed root and Certificate Type is Code Signing. 
Finally, tick the Let me override defaults (this is important)
It will warn you, you are about to create a certificate (because this might have been a shock) click continue
For serial number and validity length, you can leave as, or change. then click continue
The other certificate information can be left blank and just click continue
2048 Key size and Algorithm RSA which should be defaults just click continue
Next 3 you can just click Continue
Specify a Location, make sure you choose the Keychain option of System
With a certificate created, restart the machine. Yes there are other ways to do this, 
but trust me its just easier to restart and be sure everything is working.

Right with a certificate we need to apply it to the binary, first of create an entitlements file, 
this is an XML file that shows associated permissions you want to grant the binary.

cat gdb.xml


<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN"
"http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
    <key>com.apple.security.cs.allow-jit</key>
    <true/>
    <key>com.apple.security.cs.allow-unsigned-executable-memory</key>
    <true/>
    <key>com.apple.security.cs.allow-dyld-environment-variables</key>
    <true/>
    <key>com.apple.security.cs.disable-library-validation</key>
    <true/>
    <key>com.apple.security.cs.disable-executable-page-protection</key>
    <true/>
    <key>com.apple.security.cs.debugger</key>
    <true/>
    <key>com.apple.security.get-task-allow</key>
    <true/>
</dict>
</plist>



With the file saved (in my case as gdb.xml) then the final setup is:

codesign --entitlements gdb.xml -fs gdb-cert /usr/local/bin/gdb


Ok surprisingly at this stage it’s working and you can start using gdb on MacOS congrats.
We need to disable startup with shell by running:

(this needs to be run at startup)
set startup-with-shell off

Usually the following line solves it, but if gdb hangs when you run it, just add the script somewhere else.
echo "set startup-with-shell off" >> ~/.gdbinit 


While trying to get things working at some point you might have run

sudo DevToolsSecurity -enable

in which case I would recommend

sudo DevToolsSecurity -disable


Taks.Json


{
    // See https://go.microsoft.com/fwlink/?LinkId=733558 
    // for the documentation about the tasks.json format
    "version": "2.0.0",
    "options": {
        "env": {
            "example": "example_folder"
        }
    },
    "tasks": [
        {
            "type": "shell",
            "label": "g++ build active file",
            "command": "${workspaceFolder}/make",
            "args": [
                "all"
            ],
            "problemMatcher": [
                "$gcc"
            ],
            "group": "build"
        },
        {

            "label": "echotest",
            "command": "${workspaceFolder}/${example}/somescript",
            "args": [],
            "type": "shell"
        }
    ]
}



Launch.Json

{

    "version": "0.2.0",
    
    "configurations": [
        {
            "preLaunchTask": "echotest",
            "name": "(gdb) Launch",
            "type": "cppdbg",
            "request": "launch",
            "program": "${workspaceFolder}/debug/bin/esp",
            "args": [],
            "stopAtEntry": false,
            "cwd": "${workspaceFolder}/debug/bin/",
            "environment": [],
            "externalConsole": false,
            "MIMode": "gdb",
            "miDebuggerPath": "/usr/local/Cellar/gdb/x.x/gdb",
            "setupCommands": [
                {
                    "description": "Enable pretty-printing for gdb",
                    "text": "-enable-pretty-printing",
                    "ignoreFailures": true
                }
            ]
        }
    ]
}



Makefile commands

make all
make clean
make program
make build
make release
make debug

